From 965db05c3e0ec91c9db8a674724389649dea1209 Mon Sep 17 00:00:00 2001
From: xutao <xutao@espressif.com>
Date: Tue, 20 Aug 2024 15:00:21 +0800
Subject: [PATCH] sdmmc: support slot0 and slot coexist

---
 .../include/driver/sdmmc_default_configs.h    |   7 +-
 .../include/driver/sdmmc_host.h               |  42 +++-
 components/esp_driver_sdmmc/src/sdmmc_host.c  | 224 ++++++++++++++++--
 components/soc/include/soc/sdmmc_periph.h     |  32 ++-
 4 files changed, 260 insertions(+), 45 deletions(-)

diff --git a/components/esp_driver_sdmmc/include/driver/sdmmc_default_configs.h b/components/esp_driver_sdmmc/include/driver/sdmmc_default_configs.h
index add6c4c859..7b72fdb201 100644
--- a/components/esp_driver_sdmmc/include/driver/sdmmc_default_configs.h
+++ b/components/esp_driver_sdmmc/include/driver/sdmmc_default_configs.h
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: 2023 Espressif Systems (Shanghai) CO LTD
+ * SPDX-FileCopyrightText: 2023-2024 Espressif Systems (Shanghai) CO LTD
  *
  * SPDX-License-Identifier: Apache-2.0
  */
@@ -26,7 +26,8 @@ extern "C" {
     .flags = SDMMC_HOST_FLAG_8BIT | \
              SDMMC_HOST_FLAG_4BIT | \
              SDMMC_HOST_FLAG_1BIT | \
-             SDMMC_HOST_FLAG_DDR, \
+             SDMMC_HOST_FLAG_DDR  | \
+             SDMMC_HOST_FLAG_DEINIT_ARG, \
     .slot = SDMMC_HOST_SLOT_1, \
     .max_freq_khz = SDMMC_FREQ_DEFAULT, \
     .io_voltage = 3.3f, \
@@ -37,7 +38,7 @@ extern "C" {
     .set_card_clk = &sdmmc_host_set_card_clk, \
     .set_cclk_always_on = &sdmmc_host_set_cclk_always_on, \
     .do_transaction = &sdmmc_host_do_transaction, \
-    .deinit = &sdmmc_host_deinit, \
+    .deinit_p = &sdmmc_host_deinit_slot, \
     .io_int_enable = sdmmc_host_io_int_enable, \
     .io_int_wait = sdmmc_host_io_int_wait, \
     .command_timeout_ms = 0, \
diff --git a/components/esp_driver_sdmmc/include/driver/sdmmc_host.h b/components/esp_driver_sdmmc/include/driver/sdmmc_host.h
index e596835005..504494607f 100644
--- a/components/esp_driver_sdmmc/include/driver/sdmmc_host.h
+++ b/components/esp_driver_sdmmc/include/driver/sdmmc_host.h
@@ -58,14 +58,21 @@ typedef struct {
      */
 } sdmmc_slot_config_t;
 
+/**
+ * SD/MMC host state structure
+ */
+typedef struct {
+    bool host_initialized;  ///< Whether the host is initialized
+    int num_of_init_slots;  ///< Number of initialized slots
+} sdmmc_host_state_t;
+
 /**
  * @brief Initialize SDMMC host peripheral
  *
  * @note This function is not thread safe
  *
  * @return
- *      - ESP_OK on success
- *      - ESP_ERR_INVALID_STATE if sdmmc_host_init was already called
+ *      - ESP_OK on success or if sdmmc_host_init was already initialized with this function
  *      - ESP_ERR_NO_MEM if memory can not be allocated
  */
 esp_err_t sdmmc_host_init(void);
@@ -201,13 +208,29 @@ esp_err_t sdmmc_host_io_int_enable(int slot);
 esp_err_t sdmmc_host_io_int_wait(int slot, TickType_t timeout_ticks);
 
 /**
- * @brief Disable SDMMC host and release allocated resources
+ * @brief Disable SDMMC host and release allocated resources gracefully
+ *
+ * @note If the are more than 1 active slots, this function will just decrease the reference count
+ *       and won't actually disable the host until the last slot is disabled
+ *
+ * @note This function is not thread safe
+ *
+ * @param slot slot number (SDMMC_HOST_SLOT_0 or SDMMC_HOST_SLOT_1)
+ * @return
+ *      - ESP_OK on success
+ *      - ESP_ERR_INVALID_STATE if SDMMC host has not been initialized
+ *      - ESP_ERR_INVALID_ARG if invalid slot number is used
+ */
+esp_err_t sdmmc_host_deinit_slot(int slot);
+
+/**
+ * @brief Disable SDMMC host and release allocated resources forcefully
  *
  * @note This function is not thread safe
  *
  * @return
  *      - ESP_OK on success
- *      - ESP_ERR_INVALID_STATE if sdmmc_host_init function has not been called
+ *      - ESP_ERR_INVALID_STATE if SDMMC host has not been initialized
  */
 esp_err_t sdmmc_host_deinit(void);
 
@@ -258,6 +281,17 @@ esp_err_t sdmmc_host_set_input_delay(int slot, sdmmc_delay_phase_t delay_phase);
  */
 esp_err_t sdmmc_host_get_dma_info(int slot, esp_dma_mem_info_t *dma_mem_info);
 
+/**
+ * @brief Get the state of SDMMC host
+ *
+ * @param[out] state output parameter for SDMMC host state structure
+ *
+ * @return
+ *      - ESP_OK on success
+ *      - ESP_ERR_INVALID_ARG on invalid argument
+ */
+esp_err_t sdmmc_host_get_state(sdmmc_host_state_t* state);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/components/esp_driver_sdmmc/src/sdmmc_host.c b/components/esp_driver_sdmmc/src/sdmmc_host.c
index 2362e03028..c2ff4c3ec0 100644
--- a/components/esp_driver_sdmmc/src/sdmmc_host.c
+++ b/components/esp_driver_sdmmc/src/sdmmc_host.c
@@ -6,6 +6,7 @@
 
 #include <stdbool.h>
 #include <stddef.h>
+#include <string.h>
 #include <sys/param.h>
 #include "esp_log.h"
 #include "esp_intr_alloc.h"
@@ -45,6 +46,22 @@
 #define SDMMC_CLK_SRC_ATOMIC()
 #endif
 
+/* Default disabled interrupts (on init):
+ *  SDMMC_INTMASK_RXDR,
+ *  SDMMC_INTMASK_TXDR,
+ *  SDMMC_INTMASK_BCI,
+ *  SDMMC_INTMASK_ACD,
+ *  SDMMC_INTMASK_IO_SLOT1,
+ *  SDMMC_INTMASK_IO_SLOT0
+ */
+// Default enabled interrupts (sdio is enabled only when use):
+#define SDMMC_INTMASK_DEFAULT \
+    (SDMMC_INTMASK_CD | SDMMC_INTMASK_RESP_ERR | SDMMC_INTMASK_CMD_DONE | SDMMC_INTMASK_DATA_OVER | \
+    SDMMC_INTMASK_RCRC | SDMMC_INTMASK_DCRC | SDMMC_INTMASK_RTO | SDMMC_INTMASK_DTO | SDMMC_INTMASK_HTO | \
+    SDMMC_INTMASK_HLE | \
+    SDMMC_INTMASK_SBE | \
+    SDMMC_INTMASK_EBE)
+
 static const char *TAG = "sdmmc_periph";
 
 /**
@@ -54,6 +71,11 @@ typedef struct slot_ctx_t {
     size_t slot_width;
     sdmmc_slot_io_info_t slot_gpio_num;
     bool use_gpio_matrix;
+#if SOC_SDMMC_NUM_SLOTS >= 2
+    int slot_host_div;
+    uint32_t slot_freq_khz;
+    sdmmc_ll_delay_phase_t slot_ll_delay_phase;
+#endif
 } slot_ctx_t;
 
 /**
@@ -65,13 +87,24 @@ typedef struct host_ctx_t {
     SemaphoreHandle_t    io_intr_event;
     sdmmc_hal_context_t  hal;
     slot_ctx_t           slot_ctx[SOC_SDMMC_NUM_SLOTS];
+#if SOC_SDMMC_NUM_SLOTS >= 2
+    uint8_t              num_of_init_slots;
+    int8_t               active_slot_num;
+#endif
 } host_ctx_t;
 
-static host_ctx_t s_host_ctx;
+#if SOC_SDMMC_NUM_SLOTS >= 2
+static host_ctx_t s_host_ctx = {.active_slot_num = -1};
+#else
+static host_ctx_t s_host_ctx = {0};
+#endif
 
 static void sdmmc_isr(void *arg);
 static void sdmmc_host_dma_init(void);
 static esp_err_t sdmmc_host_pullup_en_internal(int slot, int width);
+#if SOC_SDMMC_NUM_SLOTS >= 2
+static void sdmmc_host_change_to_slot(int slot);
+#endif
 
 esp_err_t sdmmc_host_reset(void)
 {
@@ -227,6 +260,13 @@ static int sdmmc_host_calc_freq(const int host_div, const int card_div)
     return clk_src_freq_hz / host_div / ((card_div == 0) ? 1 : card_div * 2) / 1000;
 }
 
+static void sdmmc_host_set_data_timeout(uint32_t freq_khz)
+{
+    const uint32_t data_timeout_ms = 100;
+    uint32_t data_timeout_cycles = data_timeout_ms * freq_khz;
+    sdmmc_ll_set_data_timeout(s_host_ctx.hal.dev, data_timeout_cycles);
+}
+
 esp_err_t sdmmc_host_set_card_clk(int slot, uint32_t freq_khz)
 {
     if (!(slot == 0 || slot == 1)) {
@@ -269,13 +309,15 @@ esp_err_t sdmmc_host_set_card_clk(int slot, uint32_t freq_khz)
         return err;
     }
 
-    // set data timeout
-    const uint32_t data_timeout_ms = 100;
-    uint32_t data_timeout_cycles = data_timeout_ms * freq_khz;
-    sdmmc_ll_set_data_timeout(s_host_ctx.hal.dev, data_timeout_cycles);
+    sdmmc_host_set_data_timeout(freq_khz);
     // always set response timeout to highest value, it's small enough anyway
     sdmmc_ll_set_response_timeout(s_host_ctx.hal.dev, 255);
-
+#if SOC_SDMMC_NUM_SLOTS >= 2
+    // save the current frequency
+    s_host_ctx.slot_ctx[slot].slot_freq_khz = freq_khz;
+    // save host_div value
+    s_host_ctx.slot_ctx[slot].slot_host_div = host_div;
+#endif
     return ESP_OK;
 }
 
@@ -338,6 +380,10 @@ esp_err_t sdmmc_host_set_input_delay(int slot, sdmmc_delay_phase_t delay_phase)
     int phase_diff_ps = src_clk_period_ps * sdmmc_ll_get_clock_div(s_host_ctx.hal.dev) / SOC_SDMMC_DELAY_PHASE_NUM;
     ESP_LOGD(TAG, "difference between input delay phases is %d ps", phase_diff_ps);
     ESP_LOGI(TAG, "host sampling edge is delayed by %d ps", phase_diff_ps * delay_phase_num);
+#if SOC_SDMMC_NUM_SLOTS >= 2
+    // save the current phase delay setting
+    s_host_ctx.slot_ctx[slot].slot_ll_delay_phase = phase;
+#endif
 #endif
 
     return ESP_OK;
@@ -348,6 +394,12 @@ esp_err_t sdmmc_host_start_command(int slot, sdmmc_hw_cmd_t cmd, uint32_t arg)
     if (!(slot == 0 || slot == 1)) {
         return ESP_ERR_INVALID_ARG;
     }
+
+#if SOC_SDMMC_NUM_SLOTS >= 2
+    // change the host settings to the appropriate slot before starting the transaction
+    sdmmc_host_change_to_slot(slot);
+#endif
+
     // if this isn't a clock update command, check the card detect status
     if (!sdmmc_ll_is_card_detected(s_host_ctx.hal.dev, slot) && !cmd.update_clk_reg) {
         return ESP_ERR_NOT_FOUND;
@@ -378,10 +430,24 @@ esp_err_t sdmmc_host_start_command(int slot, sdmmc_hw_cmd_t cmd, uint32_t arg)
     return ESP_OK;
 }
 
+static void sdmmc_host_intmask_clear_disable(void)
+{
+    SDMMC.rintsts.val = 0xffffffff;
+    SDMMC.intmask.val = 0;
+    SDMMC.ctrl.int_enable = 0;
+}
+
+static void sdmmc_host_intmask_set_enable(uint32_t mask)
+{
+    SDMMC.intmask.val = mask;
+    SDMMC.ctrl.int_enable = 1;
+}
+
 esp_err_t sdmmc_host_init(void)
 {
     if (s_host_ctx.intr_handle) {
-        return ESP_ERR_INVALID_STATE;
+        ESP_LOGD(TAG, "%s: SDMMC host already initialized", __func__);
+        return ESP_OK;
     }
 
     //enable bus clock for registers
@@ -406,9 +472,7 @@ esp_err_t sdmmc_host_init(void)
     ESP_LOGD(TAG, "peripheral version %"PRIx32", hardware config %08"PRIx32, SDMMC.verid, SDMMC.hcon.val);
 
     // Clear interrupt status and set interrupt mask to known state
-    SDMMC.rintsts.val = 0xffffffff;
-    SDMMC.intmask.val = 0;
-    SDMMC.ctrl.int_enable = 0;
+    sdmmc_host_intmask_clear_disable();
 
     // Allocate event queue
     s_host_ctx.event_queue = xQueueCreate(SDMMC_EVENT_QUEUE_LENGTH, sizeof(sdmmc_event_t));
@@ -431,15 +495,7 @@ esp_err_t sdmmc_host_init(void)
         return ret;
     }
     // Enable interrupts
-    SDMMC.intmask.val =
-        SDMMC_INTMASK_CD |
-        SDMMC_INTMASK_CMD_DONE |
-        SDMMC_INTMASK_DATA_OVER |
-        SDMMC_INTMASK_RCRC | SDMMC_INTMASK_DCRC |
-        SDMMC_INTMASK_RTO | SDMMC_INTMASK_DTO | SDMMC_INTMASK_HTO |
-        SDMMC_INTMASK_SBE | SDMMC_INTMASK_EBE |
-        SDMMC_INTMASK_RESP_ERR | SDMMC_INTMASK_HLE; //sdio is enabled only when use.
-    SDMMC.ctrl.int_enable = 1;
+    sdmmc_host_intmask_set_enable(SDMMC_INTMASK_DEFAULT);
 
     // Disable generation of Busy Clear Interrupt
     SDMMC.cardthrctl.busy_clr_int_en = 0;
@@ -537,6 +593,8 @@ esp_err_t sdmmc_host_init_slot(int slot, const sdmmc_slot_config_t *slot_config)
         return ESP_ERR_INVALID_ARG;
     }
     s_host_ctx.slot_ctx[slot].slot_width = slot_width;
+    s_host_ctx.slot_ctx[slot].slot_gpio_num.cd = gpio_cd;
+    s_host_ctx.slot_ctx[slot].slot_gpio_num.wp = gpio_wp;
 
     bool pin_not_set = s_check_pin_not_set(slot_config);
     //SD driver behaviour is: all pins not defined == using iomux
@@ -590,7 +648,7 @@ esp_err_t sdmmc_host_init_slot(int slot, const sdmmc_slot_config_t *slot_config)
 
     bool pullup = slot_config->flags & SDMMC_SLOT_FLAG_INTERNAL_PULLUP;
     if (pullup) {
-        sdmmc_host_pullup_en_internal(slot, slot_config->width);
+        sdmmc_host_pullup_en_internal(slot, s_host_ctx.slot_ctx[slot].slot_width);
     }
 
     configure_pin(s_host_ctx.slot_ctx[slot].slot_gpio_num.clk, sdmmc_slot_gpio_sig[slot].clk, GPIO_MODE_OUTPUT, "clk", use_gpio_matrix);
@@ -664,14 +722,17 @@ esp_err_t sdmmc_host_init_slot(int slot, const sdmmc_slot_config_t *slot_config)
         return ret;
     }
 
+#if SOC_SDMMC_NUM_SLOTS >= 2
+    if (s_host_ctx.num_of_init_slots < SOC_SDMMC_NUM_SLOTS && s_host_ctx.active_slot_num != slot) {
+        s_host_ctx.num_of_init_slots += 1;
+    }
+    s_host_ctx.active_slot_num = slot;
+#endif
     return ESP_OK;
 }
 
-esp_err_t sdmmc_host_deinit(void)
+static void sdmmc_host_deinit_internal(void)
 {
-    if (!s_host_ctx.intr_handle) {
-        return ESP_ERR_INVALID_STATE;
-    }
     esp_intr_free(s_host_ctx.intr_handle);
     s_host_ctx.intr_handle = NULL;
     vQueueDelete(s_host_ctx.event_queue);
@@ -684,10 +745,103 @@ esp_err_t sdmmc_host_deinit(void)
     SDMMC_RCC_ATOMIC() {
         sdmmc_ll_enable_bus_clock(s_host_ctx.hal.dev, false);
     }
+}
+
+static int sdmmc_host_decrease_init_slot_num(void)
+{
+#if SOC_SDMMC_NUM_SLOTS >= 2
+    s_host_ctx.active_slot_num = -1; // Reset the active slot number, will be set again before the next transaction
+    if (s_host_ctx.num_of_init_slots > 0) {
+        s_host_ctx.num_of_init_slots -= 1;
+    }
+    return s_host_ctx.num_of_init_slots;
+#else
+    return 0;
+#endif
+}
+
+static void sdmmc_host_deinit_slot_internal(int slot)
+{
+    int8_t gpio_pin_num;
+    sdmmc_slot_io_info_t* gpio = &s_host_ctx.slot_ctx[slot].slot_gpio_num;
+    // Disconnect signals and reset used GPIO pins
+    for (size_t i = 0; i < (sizeof(gpio->val) / (sizeof(gpio->val[0]))); i++) {
+        gpio_pin_num = gpio->val[i];
+        if (gpio_pin_num != GPIO_NUM_NC && GPIO_IS_VALID_GPIO(gpio_pin_num)) {
+            gpio_reset_pin(gpio_pin_num);
+        }
+    }
+    // Reset the slot context
+    memset(&(s_host_ctx.slot_ctx[slot]), 0, sizeof(slot_ctx_t));
+}
+
+esp_err_t sdmmc_host_deinit_slot(int slot)
+{
+    if (!(slot == 0 || slot == 1)) {
+        return ESP_ERR_INVALID_ARG;
+    }
+    if (!s_host_ctx.intr_handle) {
+        return ESP_ERR_INVALID_STATE;
+    }
+    sdmmc_host_deinit_slot_internal(slot);
+    int num_of_init_slots = sdmmc_host_decrease_init_slot_num();
+    if (num_of_init_slots != 0) {
+        ESP_LOGD(TAG, "SDMMC host not deinitialized yet, number of initialized slots: %d",
+                 num_of_init_slots);
+        return ESP_OK;
+    }
+    sdmmc_host_deinit_internal();
+    ESP_LOGD(TAG, "SDMMC host deinitialized");
 
     return ESP_OK;
 }
 
+esp_err_t sdmmc_host_deinit(void)
+{
+    if (!s_host_ctx.intr_handle) {
+        return ESP_ERR_INVALID_STATE;
+    }
+    for (int slot = 0; slot < SOC_SDMMC_NUM_SLOTS; slot++) {
+        sdmmc_host_deinit_slot_internal(slot);
+    }
+    sdmmc_host_deinit_internal();
+    ESP_LOGD(TAG, "SDMMC host deinitialized");
+
+    return ESP_OK;
+}
+
+static bool sdmmc_host_slot_initialized(int slot)
+{
+    if (s_host_ctx.slot_ctx[slot].slot_host_div == 0) {
+        return false;
+    }
+    return true;
+}
+
+#if SOC_SDMMC_NUM_SLOTS >= 2
+static void sdmmc_host_change_to_slot(int slot)
+{
+    // If the slot is not initialized (slot_host_div not set) or already active, do nothing
+    if (s_host_ctx.active_slot_num == slot || sdmmc_host_slot_initialized(slot) == false) {
+        return;
+    }
+    s_host_ctx.active_slot_num = slot;
+
+    // Apply the appropriate saved host settings for the new slot before starting the transaction
+    SDMMC_CLK_SRC_ATOMIC() {
+        sdmmc_ll_set_clock_div(s_host_ctx.hal.dev, s_host_ctx.slot_ctx[slot].slot_host_div);
+#if !CONFIG_IDF_TARGET_ESP32
+        sdmmc_ll_set_din_delay(s_host_ctx.hal.dev, s_host_ctx.slot_ctx[slot].slot_ll_delay_phase);
+#endif
+    }
+    sdmmc_host_set_data_timeout(s_host_ctx.slot_ctx[slot].slot_freq_khz);
+
+    // Wait for the clock to propagate
+    esp_rom_delay_us(10);
+
+}
+#endif  // SOC_SDMMC_NUM_SLOTS >= 2
+
 esp_err_t sdmmc_host_wait_for_event(int tick_count, sdmmc_event_t *out_event)
 {
     if (!out_event) {
@@ -758,6 +912,7 @@ esp_err_t sdmmc_host_set_cclk_always_on(int slot, bool cclk_always_on)
     if (!(slot == 0 || slot == 1)) {
         return ESP_ERR_INVALID_ARG;
     }
+    // During initialization this is not protected by a mutex
     if (cclk_always_on) {
         sdmmc_ll_enable_card_clock_low_power(s_host_ctx.hal.dev, slot, false);
     } else {
@@ -925,10 +1080,29 @@ static esp_err_t sdmmc_host_pullup_en_internal(int slot, int width)
 
 esp_err_t sdmmc_host_get_dma_info(int slot, esp_dma_mem_info_t *dma_mem_info)
 {
-    if (!(slot == 0 || slot == 1)) {
+    if (!(slot == 0 || slot == 1)  || dma_mem_info == NULL) {
         return ESP_ERR_INVALID_ARG;
     }
     dma_mem_info->extra_heap_caps = MALLOC_CAP_DMA;
     dma_mem_info->dma_alignment_bytes = 4;
     return ESP_OK;
 }
+
+esp_err_t sdmmc_host_get_state(sdmmc_host_state_t* state)
+{
+    if (state == NULL) {
+        return ESP_ERR_INVALID_ARG;
+    }
+
+    if (s_host_ctx.intr_handle) {
+        state->host_initialized = true;
+        state->num_of_init_slots = 1;
+    } else {
+        state->host_initialized = false;
+        state->num_of_init_slots = 0;
+    }
+#if SOC_SDMMC_NUM_SLOTS >= 2
+    state->num_of_init_slots = s_host_ctx.num_of_init_slots;
+#endif
+    return ESP_OK;
+}
diff --git a/components/soc/include/soc/sdmmc_periph.h b/components/soc/include/soc/sdmmc_periph.h
index 603e578480..fe646f5325 100644
--- a/components/soc/include/soc/sdmmc_periph.h
+++ b/components/soc/include/soc/sdmmc_periph.h
@@ -1,5 +1,5 @@
 /*
- * SPDX-FileCopyrightText: 2015-2023 Espressif Systems (Shanghai) CO LTD
+ * SPDX-FileCopyrightText: 2015-2024 Espressif Systems (Shanghai) CO LTD
  *
  * SPDX-License-Identifier: Apache-2.0
  */
@@ -9,6 +9,7 @@
 //include soc related (generated) definitions
 #include "soc/soc_caps.h"
 #include "soc/soc_pins.h"
+#include "soc/gpio_num.h"
 #if SOC_SDMMC_HOST_SUPPORTED
 #include "soc/sdmmc_reg.h"
 #include "soc/sdmmc_struct.h"
@@ -31,7 +32,7 @@ typedef struct {
     uint8_t card_int;       /*!< Card interrupt signal in GPIO Matrix */
 } sdmmc_slot_info_t;
 
-/** Width and GPIO matrix signal numbers for auxillary SD host signals, one structure per slot */
+/** Width and GPIO matrix signal numbers for auxiliary SD host signals, one structure per slot */
 extern const sdmmc_slot_info_t sdmmc_slot_info[SOC_SDMMC_NUM_SLOTS];
 
 /**
@@ -39,17 +40,22 @@ extern const sdmmc_slot_info_t sdmmc_slot_info[SOC_SDMMC_NUM_SLOTS];
  * or GPIO Matrix signal numbers (if SOC_SDMMC_USE_GPIO_MATRIX is set)
  * for the SD bus signals. Field names match SD bus signal names.
  */
-typedef struct {
-    uint8_t clk;
-    uint8_t cmd;
-    uint8_t d0;
-    uint8_t d1;
-    uint8_t d2;
-    uint8_t d3;
-    uint8_t d4;
-    uint8_t d5;
-    uint8_t d6;
-    uint8_t d7;
+typedef union {
+    struct {
+        gpio_num_t cd;
+        gpio_num_t wp;
+        gpio_num_t clk;
+        gpio_num_t cmd;
+        gpio_num_t d0;
+        gpio_num_t d1;
+        gpio_num_t d2;
+        gpio_num_t d3;
+        gpio_num_t d4;
+        gpio_num_t d5;
+        gpio_num_t d6;
+        gpio_num_t d7;
+    };
+    gpio_num_t val[12]; // for iteration, num of entries in struct
 } sdmmc_slot_io_info_t;
 
 /** GPIO pin numbers of SD bus signals, one structure per slot */
-- 
2.34.1

